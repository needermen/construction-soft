// <auto-generated />
using System;
using Cs.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cs.Persistence.Migrations
{
    [DbContext(typeof(CsDbContext))]
    [Migration("20181017180135_resources_add_coef_and_comment")]
    partial class resources_add_coef_and_comment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cs.Domain.Auth.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<bool>("Active");

                    b.Property<string>("ActualAddress");

                    b.Property<DateTime>("AgreementDate");

                    b.Property<string>("AgreementNumber");

                    b.Property<string>("Bank");

                    b.Property<string>("BankCode");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Director");

                    b.Property<string>("DirectorPhoneNumber");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("LegalAddress");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("TaxCode");

                    b.HasKey("Id");

                    b.ToTable("Organizations","org");
                });

            modelBuilder.Entity("Cs.Domain.Auth.OrganizationRole", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("OrganizationId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("OrganizationRoles","org");
                });

            modelBuilder.Entity("Cs.Domain.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles","auth");
                });

            modelBuilder.Entity("Cs.Domain.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("FullName");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<bool>("PasswordShouldChange");

                    b.Property<string>("PersonalId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Token");

                    b.Property<DateTime>("TokenExpireDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users","auth");
                });

            modelBuilder.Entity("Cs.Domain.Auth.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","auth");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("ActualAddress");

                    b.Property<DateTime?>("AgreementDate");

                    b.Property<string>("AgreementNumber");

                    b.Property<string>("Bank");

                    b.Property<string>("BankCode");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Director");

                    b.Property<string>("DirectorPhoneNumber");

                    b.Property<int?>("DurationInDays");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("EntityStatus");

                    b.Property<decimal>("FullPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("LegalAddress");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("TaxCode");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Buildings","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DurationInDays");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("EntityStatus");

                    b.Property<decimal>("FullPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Phases","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ContractorExtraPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ContractorName");

                    b.Property<decimal>("ContractorPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DurationInDays");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("EntityStatus");

                    b.Property<bool>("ExecuteByContractor");

                    b.Property<decimal?>("ExtraPricePercent")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("HasToBeDoneAfterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<decimal>("PriceForBMaterials")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PriceForBrigades")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PriceForCMaterials")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PriceForMMaterials")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PriceForTechnics")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PriceForWorkers")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("WorkCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("HasToBeDoneAfterId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("WorkCategoryId");

                    b.ToTable("Works","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkBrigade", b =>
                {
                    b.Property<int>("WorkId");

                    b.Property<int>("BrigadeId");

                    b.Property<int>("Count");

                    b.HasKey("WorkId", "BrigadeId");

                    b.HasIndex("BrigadeId");

                    b.ToTable("WorkBrigades","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkBuildingMaterial", b =>
                {
                    b.Property<int>("WorkId");

                    b.Property<int>("MaterialId");

                    b.Property<int>("Count");

                    b.HasKey("WorkId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("WorkBuildingMaterials","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DurationInDays");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("EntityStatus");

                    b.Property<decimal>("FullPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("PhaseId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PhaseId");

                    b.ToTable("WorkCategories","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkConsumptionMaterial", b =>
                {
                    b.Property<int>("WorkId");

                    b.Property<int>("MaterialId");

                    b.Property<int>("Count");

                    b.HasKey("WorkId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("WorkConsumptionMaterials","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkMainMaterial", b =>
                {
                    b.Property<int>("WorkId");

                    b.Property<int>("MaterialId");

                    b.Property<int>("Count");

                    b.HasKey("WorkId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("WorkMainMaterials","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkTechnic", b =>
                {
                    b.Property<int>("WorkId");

                    b.Property<int>("TechnicId");

                    b.Property<int>("Count");

                    b.HasKey("WorkId", "TechnicId");

                    b.HasIndex("TechnicId");

                    b.ToTable("WorkTechnics","building");
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkWorker", b =>
                {
                    b.Property<int>("WorkId");

                    b.Property<int>("WorkerId");

                    b.Property<int>("Count");

                    b.HasKey("WorkId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkWorkers","building");
                });

            modelBuilder.Entity("Cs.Domain.Files.BrigadeFile", b =>
                {
                    b.Property<int>("FileId");

                    b.Property<int>("BrigadeId");

                    b.HasKey("FileId", "BrigadeId");

                    b.HasIndex("BrigadeId");

                    b.ToTable("BrigadeFiles","storage");
                });

            modelBuilder.Entity("Cs.Domain.Files.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Filename");

                    b.Property<string>("Format");

                    b.HasKey("Id");

                    b.ToTable("Files","storage");
                });

            modelBuilder.Entity("Cs.Domain.Files.WorkerFile", b =>
                {
                    b.Property<int>("FileId");

                    b.Property<int>("WorkerId");

                    b.HasKey("FileId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerFiles","storage");
                });

            modelBuilder.Entity("Cs.Domain.Hr.Brigade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.Property<int>("PaymentTypeId");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Brigades","hr");
                });

            modelBuilder.Entity("Cs.Domain.Hr.BrigadeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BrigadeCategories","hr");
                });

            modelBuilder.Entity("Cs.Domain.Hr.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes","hr");
                });

            modelBuilder.Entity("Cs.Domain.Hr.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.Property<int>("PaymentTypeId");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Workers","hr");
                });

            modelBuilder.Entity("Cs.Domain.Hr.WorkerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("WorkerCategories","hr");
                });

            modelBuilder.Entity("Cs.Domain.Materials.BuildingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DimensionId");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DimensionId");

                    b.ToTable("BuildingMaterials","material");
                });

            modelBuilder.Entity("Cs.Domain.Materials.BuildingMaterialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BuildingMaterialCategories","material");
                });

            modelBuilder.Entity("Cs.Domain.Materials.ConsumptionMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DimensionId");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DimensionId");

                    b.ToTable("ConsumptionMaterials","material");
                });

            modelBuilder.Entity("Cs.Domain.Materials.ConsumptionMaterialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ConsumptionMaterialCategories","material");
                });

            modelBuilder.Entity("Cs.Domain.Materials.MainMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("Depreciation")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("DimensionId");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DimensionId");

                    b.ToTable("MainMaterials","material");
                });

            modelBuilder.Entity("Cs.Domain.Materials.MainMaterialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MainMaterialCategories","material");
                });

            modelBuilder.Entity("Cs.Domain.Materials.MaterialDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MaterialDimensions","material");
                });

            modelBuilder.Entity("Cs.Domain.Technics.Technic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DimensionId");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DimensionId");

                    b.ToTable("Technics","technic");
                });

            modelBuilder.Entity("Cs.Domain.Technics.TechnicCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TechnicCategories","technic");
                });

            modelBuilder.Entity("Cs.Domain.Technics.TechnicDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TechnicDimensions","technic");
                });

            modelBuilder.Entity("Cs.Domain.Auth.OrganizationRole", b =>
                {
                    b.HasOne("Cs.Domain.Auth.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Auth.Role", "Role")
                        .WithMany("OrganizationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Auth.User", b =>
                {
                    b.HasOne("Cs.Domain.Auth.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Auth.UserRole", b =>
                {
                    b.HasOne("Cs.Domain.Auth.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Auth.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.Building", b =>
                {
                    b.HasOne("Cs.Domain.Auth.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.Phase", b =>
                {
                    b.HasOne("Cs.Domain.Buildings.Building", "Building")
                        .WithMany("Phases")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Auth.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.Work", b =>
                {
                    b.HasOne("Cs.Domain.Buildings.Work", "HasToBeDoneAfter")
                        .WithMany()
                        .HasForeignKey("HasToBeDoneAfterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Auth.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Buildings.WorkCategory", "WorkCategory")
                        .WithMany("Works")
                        .HasForeignKey("WorkCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkBrigade", b =>
                {
                    b.HasOne("Cs.Domain.Hr.Brigade", "Brigade")
                        .WithMany("Works")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Buildings.Work", "Work")
                        .WithMany("Brigades")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkBuildingMaterial", b =>
                {
                    b.HasOne("Cs.Domain.Materials.BuildingMaterial", "BuildingMaterial")
                        .WithMany("Works")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Buildings.Work", "Work")
                        .WithMany("BuildingMaterials")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkCategory", b =>
                {
                    b.HasOne("Cs.Domain.Auth.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Buildings.Phase", "Phase")
                        .WithMany("WorkCategories")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkConsumptionMaterial", b =>
                {
                    b.HasOne("Cs.Domain.Materials.ConsumptionMaterial", "Material")
                        .WithMany("Works")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Buildings.Work", "Work")
                        .WithMany("ConsumptionMaterials")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkMainMaterial", b =>
                {
                    b.HasOne("Cs.Domain.Materials.MainMaterial", "Material")
                        .WithMany("Works")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Buildings.Work", "Work")
                        .WithMany("MainMaterials")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkTechnic", b =>
                {
                    b.HasOne("Cs.Domain.Technics.Technic", "Technic")
                        .WithMany("Works")
                        .HasForeignKey("TechnicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Buildings.Work", "Work")
                        .WithMany("Technics")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Buildings.WorkWorker", b =>
                {
                    b.HasOne("Cs.Domain.Buildings.Work", "Work")
                        .WithMany("Workers")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Hr.Worker", "Worker")
                        .WithMany("Works")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Files.BrigadeFile", b =>
                {
                    b.HasOne("Cs.Domain.Hr.Brigade", "Brigade")
                        .WithMany("Files")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Files.File", "File")
                        .WithMany("Brigades")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Files.WorkerFile", b =>
                {
                    b.HasOne("Cs.Domain.Files.File", "File")
                        .WithMany("Workers")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Hr.Worker", "Worker")
                        .WithMany("Files")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Hr.Brigade", b =>
                {
                    b.HasOne("Cs.Domain.Hr.BrigadeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Hr.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Hr.Worker", b =>
                {
                    b.HasOne("Cs.Domain.Hr.WorkerCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Hr.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Materials.BuildingMaterial", b =>
                {
                    b.HasOne("Cs.Domain.Materials.BuildingMaterialCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Materials.MaterialDimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Materials.ConsumptionMaterial", b =>
                {
                    b.HasOne("Cs.Domain.Materials.ConsumptionMaterialCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Materials.MaterialDimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Materials.MainMaterial", b =>
                {
                    b.HasOne("Cs.Domain.Materials.MainMaterialCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Materials.MaterialDimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cs.Domain.Technics.Technic", b =>
                {
                    b.HasOne("Cs.Domain.Technics.TechnicCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cs.Domain.Technics.TechnicDimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
